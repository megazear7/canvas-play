export default class ComputerTicTacToePlayer {
  constructor({
            cells,
            delay,
            playerNumber,
            } = {}) {
    this.cells = cells;
    this.delay = delay;
    this.playerNumber = playerNumber;

    this.netParams = getSavedNetParams();
  }

  makeMove() {
    return new Promise(resolve => {
      setTimeout(() => {
        return resolve(this.chooseCell());
      }, this.delay);
    });
  }

  chooseCell() {
    const preferences = this.findPreferences();
    const guesses = [];
    for (var k = 0; k < preferences.length; k++) {
      guesses.push({ cell: k+1, preference: preferences[k] });
    }
    const filteredGuesses = guesses
      .filter(guess => this.cells[guess.cell-1] === 0)
      .sort((g1, g2) => g2.preference - g1.preference);
    
    if (filteredGuesses.length > 0) {
      return filteredGuesses[0].cell;
    } else {
      console.error("No space available");
      return 1;
    }
  }

  findPreferences() {
    const net = this.buildNet();
    return net[net.length-1];
  }

  buildNet() {
    const net = [];

    // The first layer of the net is the 'observation'
    net.push(this.observe());

    // Each additional layer is connected by a set of weights
    for (var i = 0; i < this.netParams.weights.length; i++) {
      const layer = [];
      for (var j = 0; j < this.netParams.weights[i].length; j++) {
        // The value of each node depends on the previous layer of the net, the current layer (i), and it's position in that layer(j)
        layer.push(this.calculateNode(net, i+1, j));
      }
      net.push(layer);
    }
    return net;
  }

  calculateNode(net, layerIndex, nodeIndex) {
    // assert layerIndex >= 1 ... this should never be called on the 'input' / 'observation' layer, that is, layer 1.
    const previousLayer = net[layerIndex-1];
    const edges = this.netParams.weights[layerIndex-1];
    const bias = this.netParams.biases[layerIndex-1][nodeIndex];

    // assert previousLayer.length == edges.length
    let val = bias;
    for (var i; i < previousLayer.length; i++) {
      val += previousLayer[i] * edges[i];
    }
    return this.sigmoid(val);
  }

  sigmoid(t) {
    return 1/(1+Math.pow(Math.E, -t));
  }

  possibleStates() {
    return [
      0,                                // the space is empty
      this.playerNumber,                // we have the space
      this.playerNumber === 1 ? 2 : 1,  // the opponent has the space
    ];
  }

  observe() {
    const observation = [];
    
    // The first 9 values are a 1 if the space is empty or a 0 otherwise
    // The second 9 values are a 1 if we have the space
    // The third 9 values are a 1 if the opponent has the space
    this.possibleStates().forEach(state => {
      this.cells.forEach(cell => {
        observation.push(cell === state ? 1 : 0);
      });
    });

    // Use this to generate noise inputs
    //for (var i = 0; i < 27; i++) {
    //  observation.push(Math.random());
    //}

    return observation;
  }

  randomCell() {
    return Math.floor(Math.random() * 9) + 1;
  }

  updateCells(cells) {
    this.cells = cells;
  }

  updateNetParams() {
    // TODO implement the back propogation
    // What data do we need?
    // What math do we need to do?
  }

  saveNetParams() {
    window.localStorage.setItem("TIC_TAC_TOE_AI", JSON.stringify(this.netParams));
  }

  notifyWin() {
    this.updateNetParams();
    this.saveNetParams();
  }

  notifyLoss() {
    this.updateNetParams();
    this.saveNetParams();
  }

  notifyTie() {
    this.updateNetParams();
    this.saveNetParams();
  }

  printNet() {
    console.log(JSON.stringify(this.netParams));
  }
}

function getSavedNetParams() {
  const savedAi = JSON.parse(window.localStorage.getItem("TIC_TAC_TOE_AI"));

  if (savedAi) {
    return savedAi;
  } else {
    const staticAi = getStaticNetParams();
    window.localStorage.setItem("TIC_TAC_TOE_AI", JSON.stringify(staticAi));
    return staticAi;
  }
}

function getStaticNetParams() {
  return {"weights":[[[0.5005836758634152,0.8248584696771708,0.17361801839024005,0.7667790926353433,0.19362292888519805,0.9376162317876375,0.42510517559465244,0.5098470590623314,0.5294588105099132,0.11845697246640774,0.06998736048139942,0.11596322901869516,0.0933320650982461,0.7889316993463402,0.9835366186936252,0.22834396748427088,0.9631423015049512,0.11735830592790508,0.7248652358757619,0.2959338335094175,0.8934973585106889,0.7176975127172103,0.7194129131610252,0.23960497359564936,0.30142185479786976,0.38673318340433105,0.6434416224102055],[0.13942514547917306,0.502977613262696,0.18963892198739152,0.5486333650704684,0.6111793669571117,0.621129579389482,0.5375595739635188,0.08001792565458299,0.40791308393315284,0.4932181846002235,0.6757058775191749,0.8570898817030472,0.07517688194593797,0.7000294306229762,0.361029384846588,0.302242116083121,0.12071920178398554,0.7027286143836964,0.5776512915650971,0.8252668321407446,0.296929126910924,0.35377070579826686,0.6381641280850774,0.6975705974574475,0.15981629171612077,0.4500113619905619,0.9097101330856332],[0.28598223016773794,0.1613503138559278,0.5805791564498961,0.15021472165164584,0.6175859383036284,0.0695235327047159,0.34822915073092786,0.4854828364359416,0.2122486919268829,0.31513477614860697,0.44256843240392607,0.17569018020480276,0.8678923265983789,0.3128197951022358,0.4475865348640915,0.4054190243048865,0.23574318411770578,0.9924199160290521,0.1586465736836533,0.7159767606501581,0.5872361704279907,0.38749995928900893,0.2926540074641597,0.23003614844469045,0.9883111179973716,0.1169105591541868,0.4720352404894037],[0.003299164532228227,0.9982337390601468,0.10794149570298539,0.010127532634151448,0.7185999968853434,0.8422304852823344,0.5689914160231699,0.7385787941282012,0.8555099925591885,0.09425431405716611,0.9750993524280811,0.4982347032295087,0.5874311999904505,0.1533019313702959,0.9570393880712769,0.2826746229028956,0.699263102548479,0.2946345434518476,0.6989257682643297,0.6136601439671936,0.5120130390410427,0.9182567545673048,0.17515281068234856,0.46146651445957265,0.9011624736135952,0.6506344332002243,0.9693789147212919],[0.08683661027327272,0.6299665343664205,0.9979379512498598,0.2900519466444891,0.8840375353612913,0.42931184450507387,0.5355954201289059,0.2508310847000286,0.33203025061303726,0.6686777770080814,0.26457747650191954,0.23384461704773662,0.13551513610450394,0.8825702496977612,0.5748571589091924,0.6886750173670304,0.4753117984124491,0.6706068973572392,0.880154156743268,0.6884621357349094,0.593101951634555,0.7825535460141597,0.1428584433499176,0.28665073479115244,0.6359423171934735,0.7434502048387905,0.6526338735362751],[0.9276039545488624,0.18844145273379365,0.46702857817127263,0.9450744047114414,0.9044847944521306,0.14816072004375358,0.9725386177190665,0.37727913144162417,0.8205029118710292,0.6057863428971952,0.41273881527341527,0.958770040328299,0.5711336205370827,0.6010551446136703,0.7417022837532368,0.982528790703548,0.3268470865647397,0.6451181234104093,0.7214798099460875,0.13798251691022823,0.9883996727434963,0.4463172760236416,0.8135519470136825,0.8961387013189348,0.4870177849670656,0.9595962075622866,0.8915089877491493],[0.8933640667864828,0.653788763951269,0.06801179913631361,0.04125961508576048,0.2685391154813215,0.7604839264498922,0.640810863168588,0.6486047211401145,0.38565449450943956,0.5634421503880962,0.6626854367246418,0.4012800898092923,0.6233432668023029,0.3580430310720424,0.91196777545886,0.3812674075687277,0.9919448444204126,0.17396219860917572,0.9019520541749935,0.19293200739234306,0.5084076326507085,0.6397736149602975,0.9368270403879377,0.2093275457849888,0.5122327424564337,0.3259528753227172,0.918726471896284],[0.22119778435486115,0.2232587238373851,0.4867450581446269,0.562618831979778,0.8733040332085078,0.37240732496344764,0.23714205457482707,0.07893436767058604,0.635986154112663,0.6769746670990642,0.18361414992360303,0.016153159750930346,0.3635347439908556,0.8074051847219597,0.23610981545698073,0.24042389509799378,0.28853777429371963,0.7448624125654577,0.05975544091514973,0.9899348377064856,0.28573974735305674,0.0957198947637643,0.14970081670212254,0.4406017428710405,0.8995444405903488,0.868878398522313,0.40646854795356147],[0.8647588989698518,0.2008153824253751,0.9631433601472486,0.1341221219290829,0.7790664526215756,0.5444567716999953,0.2830283662293087,0.6243420079145632,0.24501870996309494,0.08418628055369992,0.5018009744865313,0.6604984090319774,0.8924317122838954,0.5156436904236796,0.815536581300758,0.27470208079639136,0.5120837788604589,0.5663988989452529,0.9655939214158635,0.9396776665237891,0.9189708144371511,0.8209448800887509,0.17357708002835803,0.42057020493120745,0.4932874709152524,0.9909928926860259,0.6124360706626131],[0.6683615196391548,0.6015632961957009,0.6002637933475738,0.9487677744048006,0.0818971990367019,0.18128738202709016,0.02047482558321656,0.5805843717729622,0.1920103583163688,0.18910534211293695,0.7566307489690818,0.6292075294922967,0.9697639462018544,0.3769321707936899,0.03982038146424127,0.007066895952651642,0.7799112556218657,0.9754377900704312,0.9242733505147629,0.32529679240141696,0.8999293268317414,0.797035154503237,0.6091370217541803,0.45348943952888043,0.9698546043065823,0.6593372992166748,0.8180858501801469],[0.570698609454144,0.9453502527704114,0.06012123054664431,0.46509582291508944,0.3047379508933368,0.6853515609998679,0.8872121583269448,0.11519960369147664,0.4709609182563419,0.940867255066695,0.5425815594693135,0.2895249352522913,0.4866575880098014,0.6682133216450372,0.056183678054296804,0.6183189429439029,0.8823062712157328,0.7323040687125293,0.13671546818193914,0.5528169963557275,0.772458126195755,0.1125200190372373,0.9669525842101947,0.07092427901132647,0.46031684449737287,0.701703647321996,0.2321277843317402],[0.11243457534629231,0.8050660983370137,0.00019965454191606113,0.7542508910467758,0.3178202585682479,0.9817200205733758,0.8671446405129339,0.3727517694997833,0.014714778090821667,0.3657258753826911,0.3819908200210189,0.5393496409394574,0.5528158426128873,0.7677225783098989,0.5815880139979743,0.09696939993830767,0.48752394587570547,0.7706763507894954,0.778291403656248,0.22095253825915573,0.3890987169975546,0.5344207080857433,0.6710353198518502,0.3996185386972968,0.11259625169420984,0.30666902108279737,0.34941232722844173],[0.8794615226045328,0.22476989117726665,0.494201260701544,0.1723524830705756,0.043863457464286215,0.9199371098748401,0.007787570947474842,0.4348784113151851,0.036562610400219464,0.2808576980285302,0.9504383494889532,0.8352296806267643,0.45400492225559486,0.4016090366781029,0.1737692647336515,0.947484340630679,0.27860004903103763,0.46059760461118926,0.021565820670073732,0.536095377671445,0.25936398602282273,0.6453538455201271,0.704775252954394,0.8492665030939961,0.011186055767221204,0.26885576518412546,0.08032623800463279],[0.7442511239877119,0.8197056631598845,0.7626289932024399,0.48101596988323236,0.3819602550065764,0.9761692150747037,0.2802400438006307,0.3280613336837248,0.7997530517069142,0.26565728861371185,0.5139542870097553,0.7587568786349852,0.2185227230044977,0.9880695386066527,0.39082642600701045,0.3824002710673884,0.93448721376495,0.14126010749838347,0.4723499659314312,0.17868464509247883,0.3499221861147903,0.79987010030656,0.7671929976027152,0.9179086547201254,0.41078368187985315,0.14536054753087013,0.25717838239271695],[0.1810835353071225,0.9930895053369555,0.524762670609221,0.14924923998622663,0.08868488242972639,0.5964507647765398,0.0005227989294525059,0.378823753636254,0.6942215940805825,0.16858076789211762,0.19513805741057588,0.37117424879716965,0.5736258012052764,0.01764747935618627,0.605768686768523,0.23972721527695118,0.30587922409746415,0.893793892055883,0.717725409771871,0.3061685697508574,0.6430033879703974,0.059712636146117104,0.6113255283217778,0.6429761907435849,0.2938937488238531,0.920721413601493,0.32719194297250054],[0.9842129068047374,0.5383092323196408,0.8923052057323759,0.3318864374124071,0.432082875639457,0.3141434686291418,0.7538535585842678,0.07525593220735738,0.09386405894544714,0.917847380850723,0.7505437372540871,0.8218432631109425,0.029965649322879928,0.3104758983039775,0.6197130486637745,0.5538145732579729,0.16708627047304203,0.6122734824844485,0.265675657648593,0.4512867532781579,0.29964428916299535,0.14197529638950424,0.9375227209753485,0.6974269630518097,0.6636282109689606,0.2213016915160093,0.7826075968842157]],[[0.5490744693372438,0.36654497362379046,0.47984023931240327,0.3837758625088159,0.3787243925579933,0.6649567675516175,0.023973202765670276,0.30354844111672463,0.45602145752438594,0.9752618170905081,0.4946022467191058,0.9986316527112242,0.6730969163623306,0.48293914289303896,0.011796096784623344,0.48823178016762103],[0.8722060474993398,0.447307803301932,0.791226554326633,0.928924004435856,0.9282560101166297,0.9535171931900865,0.5540992712538162,0.5993745181193031,0.7481510244237042,0.5458702655896317,0.720240300683636,0.8924060872144264,0.5430509853474572,0.4508946072823621,0.9567217885113708,0.03713828978614764],[0.5344626259623719,0.7782479852474888,0.6952502718523046,0.5951734700317663,0.5451386729992262,0.5625037568739395,0.78045855288319,0.7802700476967337,0.11545456852315295,0.8504821078549156,0.6082860676390045,0.21554809305161937,0.7275557624375624,0.36994359821967726,0.9034987705495601,0.9466543549942936],[0.33708146369952363,0.857634961402574,0.022876802882888958,0.6606963237095169,0.9122124041872661,0.3603258266154241,0.08438070124466335,0.4622496664277649,0.09125476543032218,0.8903580321479514,0.09108792426384782,0.5158896970936728,0.6762882761570583,0.08238711774018492,0.5560397163183839,0.7384066759982051],[0.3472024703860188,0.7188049992138499,0.7802462761166031,0.3759173301541745,0.178734724533532,0.3551869499792697,0.3070282012729051,0.27508071908838483,0.6462863299563528,0.3013708814769742,0.09057413430238825,0.4300091509289876,0.22743252060162233,0.11586133088926243,0.006264227461610705,0.8298543432079364],[0.9062971164978633,0.720521988358974,0.9757136896937495,0.8998035974324945,0.7674411367167007,0.5441369607035293,0.24160986527847483,0.47598061678432235,0.8689668897846325,0.1367908141867975,0.5330201932308141,0.5537797392833865,0.6748495890978108,0.5125016729383343,0.06452825640239501,0.17843481809914574],[0.2153209495415036,0.9556745207332389,0.5663061529653712,0.33938398340166787,0.26813191302885886,0.07047355189401339,0.10121146555696314,0.19145121931892883,0.9239991625675905,0.3513816019941205,0.27071224907228797,0.36191800242504346,0.9554251346225751,0.050370412335398296,0.6216080669881192,0.5037496179308105],[0.07090831452486568,0.35757193405001964,0.31489099245356633,0.13952781664098102,0.6995370090886046,0.5051961028803158,0.39566759347907543,0.6217820025987664,0.2729190288684591,0.9140248536404734,0.7142642862051858,0.7338865869539584,0.9118399491629432,0.7110886446760436,0.03236071354937442,0.29474710915742475],[0.8040799567903592,0.8419485470023402,0.3866594399693093,0.6171274373949034,0.8809638165524463,0.150539082917567,0.7710123073449111,0.2156024970343171,0.8521036098020918,0.5348405629505637,0.5574343736592775,0.6513268504678751,0.7696174294923019,0.9558999049715193,0.6765348447970976,0.4321950930766616]]],"biases":[[0.9469332927827514,0.803296842341275,0.8130029365093974,0.9714761847691182,0.5921214516402891,0.3532171497566552,0.8567736254423708,0.31528113110101175,0.7492323164737087,0.30288894611593586,0.7579915748434904,0.19187793071469383,0.677123113656962,0.4998658763913826,0.03831062998157719,0.4925086536327077],[0.47931790977436806,0.3875003343321348,0.17231347672916097,0.47775294882313313,0.8356803076998616,0.020845492820341205,0.8552862453750982,0.07723031025506955,0.05375883213503552,0.31881479155647363,0.45053269669149243,0.27673869024793474,0.5520745184523945,0.271459646032989,0.845032699636848,0.08791846580411211]]};
}

function randomSeedData(inputs, hiddenLayers, hiddenLayerSize, outputs) {
  const seedData = {
    weights: [],
    biases: [],
  }

  for (var i = 0; i < (hiddenLayers+1); i++) {
    const layer = [];
    const layerLength = i === hiddenLayers ? outputs : hiddenLayerSize;
    for (var j = 0; j < layerLength; j++) {
      const connections = [];
      const connectionLength = i === 0 ? inputs : hiddenLayerSize;
      for (var k = 0; k < connectionLength; k++) {
        connections.push(Math.random());
      }
      layer.push(connections);
    }
    seedData.weights.push(layer);
  }

  for (var l = 0; l < (hiddenLayers+1); l++) {
    layer = [];
    const layerLength = i === hiddenLayers ? outputs : hiddenLayerSize;
    for (var j = 0; j < layerLength; j++) {
      layer.push(Math.random());
    }
    seedData.biases.push(layer);
  }

  return seedData;
}